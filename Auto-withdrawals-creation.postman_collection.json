{
	"info": {
		"_postman_id": "ecaebcf6-f494-4ced-bcc9-94e7768ecb58",
		"name": "Create Courier Withdrawals",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create new undefined courier Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"CourierId\", pm.response.json().courier.id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"token\", pm.response.json().token);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"function getInc(num, i) {\r",
							"    var inc = Number(num)*((i%2)+1);\r",
							"    return (inc>9)?inc-=9:inc;\r",
							"}\r",
							"function getIid() {\r",
							"    var iid=\"\", num, counter=0;\r",
							"    for(var i=0;i<8;i++) {\r",
							"        num=getRandomInt((i<2)?2:0,(i<2)?3:9);\r",
							"        iid+=num.toString();\r",
							"        counter+=getInc(num,i);\r",
							"    }\r",
							"    return iid+(10-(counter%10)).toString();\r",
							"}\r",
							"function checkIid(s) {\r",
							"    var sID = String(s);\r",
							"    if ((sID.length != 9) || (isNaN(sID))) return false;\r",
							"    var counter = 0, incNum;\r",
							"    for (var i = 0; i < 9; i++) {\r",
							"        incNum = Number(sID.charAt(i));\r",
							"        incNum *= (i % 2) + 1;\r",
							"        if (incNum > 9) incNum -= 9;\r",
							"        counter += incNum;\r",
							"    }\r",
							"    return (counter % 10 === 0);\r",
							"}\r",
							"const generate = function() {\r",
							"    let iid = null;\r",
							"    let checkStatus = null;\r",
							"    while (!checkStatus) {\r",
							"        iid = getIid();\r",
							"        checkStatus = checkIid(iid);\r",
							"    }\r",
							"    return iid;\r",
							"};\r",
							"const nationalid = generate();\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"NationalId\",nationalid);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"type": "text",
						"value": "csrftoken=PFkyiEELyDjvkskvqCpnxna7gLro7e4bl6DQyE5L7Zi1EiOx4zvUwz34OQHUn1r7"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\t{\r\n    \"city\": \"תל אביב\",\r\n\t\"email\": \"tomer+{{$randomInt}}{{$randomInt}}@gmail.com\",\r\n\t\"first_name\": \"Tomer\",\r\n\t\"last_name\": \"levi gptest\",\r\n\t\"national_id\": \"{{NationalId}}\",\r\n\t\"phone_number\": \"0522{{$randomInt}}{{$randomInt}}\",\r\n\t\"tax_id\": \"{{NationalId}}\",\r\n\t\"tax_method\": 0,\r\n\t\"vehicle_license_number\": \"11111111\",\r\n\t\"vehicle_type_id\": 5,\r\n\t\"with_payment\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://stg-python.getpackage.com/api/v1/courier/create/",
					"protocol": "https",
					"host": [
						"stg-python",
						"getpackage",
						"com"
					],
					"path": [
						"api",
						"v1",
						"courier",
						"create",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add  bank to undefined courier Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"CourierId\", pm.response.json().courier.id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"function getInc(num, i) {\r",
							"    var inc = Number(num)*((i%2)+1);\r",
							"    return (inc>9)?inc-=9:inc;\r",
							"}\r",
							"function getIid() {\r",
							"    var iid=\"\", num, counter=0;\r",
							"    for(var i=0;i<8;i++) {\r",
							"        num=getRandomInt((i<2)?2:0,(i<2)?3:9);\r",
							"        iid+=num.toString();\r",
							"        counter+=getInc(num,i);\r",
							"    }\r",
							"    return iid+(10-(counter%10)).toString();\r",
							"}\r",
							"function checkIid(s) {\r",
							"    var sID = String(s);\r",
							"    if ((sID.length != 9) || (isNaN(sID))) return false;\r",
							"    var counter = 0, incNum;\r",
							"    for (var i = 0; i < 9; i++) {\r",
							"        incNum = Number(sID.charAt(i));\r",
							"        incNum *= (i % 2) + 1;\r",
							"        if (incNum > 9) incNum -= 9;\r",
							"        counter += incNum;\r",
							"    }\r",
							"    return (counter % 10 === 0);\r",
							"}\r",
							"const generate = function() {\r",
							"    let iid = null;\r",
							"    let checkStatus = null;\r",
							"    while (!checkStatus) {\r",
							"        iid = getIid();\r",
							"        checkStatus = checkIid(iid);\r",
							"    }\r",
							"    return iid;\r",
							"};\r",
							"const nationalid = generate();\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"NationalId\",nationalid);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"type": "text",
						"value": "gtpkg=s%3AQubsI7IF10VOs_uAom8a3zeAVA18QYaH.3HUJlOcno%2Bayt6qBG2Ms4IXQGSR4mguqZDE4%2FlxH9kc"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"account_number\": \"{{$randomInt}}\",\r\n    \"bank_id\": 1,\r\n    \"branch_number\": \"934\",\r\n    \"account_owner_name\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://stg-web.getpackage.com/api/v1/admin/courier/{{CourierId}}/",
					"protocol": "https",
					"host": [
						"stg-web",
						"getpackage",
						"com"
					],
					"path": [
						"api",
						"v1",
						"admin",
						"courier",
						"{{CourierId}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Manual Payout Line Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"delivery_id\", pm.response.json().delivery_id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"const moment = require('moment');\r",
							"pm.globals.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Token 9857f44f2193b7d38e1347ba42548ae4bd3edf8e"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operationName\": \"CreateManualChargeLine\",\r\n    \"variables\": {\r\n        \"time\": \"2020-12-01T01:08:09.275+02:00\",\r\n        \"courierId\": {{CourierId}},\r\n        \"manualType\": 0,\r\n        \"description\": \"sdf\",\r\n        \"price\": 12\r\n    },\r\n    \"query\": \"mutation CreateManualChargeLine($time: DateTime, $courierId: Int, $manualType: Int, $description: String, $price: Float) {\\n  createManualChargeLine(time: $time, courierId: $courierId, manualType: $manualType, description: $description, price: $price) {\\n    id\\n    courierId\\n    routeId\\n    courierPayout {\\n      amount\\n      currency\\n      __typename\\n    }\\n    time\\n    description\\n    type\\n    courierTaxId\\n    senderId\\n    senderName\\n    status\\n    __typename\\n  }\\n}\\n\"\r\n}"
				},
				"url": {
					"raw": "https://api-stg.getpackage-dev.com/v1/graphql/",
					"protocol": "https",
					"host": [
						"api-stg",
						"getpackage-dev",
						"com"
					],
					"path": [
						"v1",
						"graphql",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Withdrawal- undefined Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"EncPhoneNumber\", _.random(10000000, 99999999))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Token {{token}}"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  createWithdrawal {\r\n    id\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api-stg.getpackage-dev.com/v1/graphql/",
					"protocol": "https",
					"host": [
						"api-stg",
						"getpackage-dev",
						"com"
					],
					"path": [
						"v1",
						"graphql",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new undefined courier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"CourierId\", pm.response.json().courier.id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"token\", pm.response.json().token);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"function getInc(num, i) {\r",
							"    var inc = Number(num)*((i%2)+1);\r",
							"    return (inc>9)?inc-=9:inc;\r",
							"}\r",
							"function getIid() {\r",
							"    var iid=\"\", num, counter=0;\r",
							"    for(var i=0;i<8;i++) {\r",
							"        num=getRandomInt((i<2)?2:0,(i<2)?3:9);\r",
							"        iid+=num.toString();\r",
							"        counter+=getInc(num,i);\r",
							"    }\r",
							"    return iid+(10-(counter%10)).toString();\r",
							"}\r",
							"function checkIid(s) {\r",
							"    var sID = String(s);\r",
							"    if ((sID.length != 9) || (isNaN(sID))) return false;\r",
							"    var counter = 0, incNum;\r",
							"    for (var i = 0; i < 9; i++) {\r",
							"        incNum = Number(sID.charAt(i));\r",
							"        incNum *= (i % 2) + 1;\r",
							"        if (incNum > 9) incNum -= 9;\r",
							"        counter += incNum;\r",
							"    }\r",
							"    return (counter % 10 === 0);\r",
							"}\r",
							"const generate = function() {\r",
							"    let iid = null;\r",
							"    let checkStatus = null;\r",
							"    while (!checkStatus) {\r",
							"        iid = getIid();\r",
							"        checkStatus = checkIid(iid);\r",
							"    }\r",
							"    return iid;\r",
							"};\r",
							"const nationalid = generate();\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"NationalId\",nationalid);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"EncPhoneNumber\", _.random(10000000, 99999999))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"type": "text",
						"value": "csrftoken=PFkyiEELyDjvkskvqCpnxna7gLro7e4bl6DQyE5L7Zi1EiOx4zvUwz34OQHUn1r7"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\t{\r\n    \"city\": \"תל אביב\",\r\n\t\"email\": \"tomer+{{$randomInt}}{{$randomInt}}@gmail.com\",\r\n\t\"first_name\": \"Tomer\",\r\n\t\"last_name\": \"levi gptest\",\r\n\t\"national_id\": \"{{NationalId}}\",\r\n\t\"phone_number\": \"05{{EncPhoneNumber}}\",\r\n\t\"tax_id\": \"{{NationalId}}\",\r\n\t\"tax_method\": 0,\r\n\t\"vehicle_license_number\": \"11111111\",\r\n\t\"vehicle_type_id\": 5,\r\n\t\"with_payment\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://stg-python.getpackage.com/api/v1/courier/create/",
					"protocol": "https",
					"host": [
						"stg-python",
						"getpackage",
						"com"
					],
					"path": [
						"api",
						"v1",
						"courier",
						"create",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add  bank to undefined courier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"CourierId\", pm.response.json().courier.id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"function getInc(num, i) {\r",
							"    var inc = Number(num)*((i%2)+1);\r",
							"    return (inc>9)?inc-=9:inc;\r",
							"}\r",
							"function getIid() {\r",
							"    var iid=\"\", num, counter=0;\r",
							"    for(var i=0;i<8;i++) {\r",
							"        num=getRandomInt((i<2)?2:0,(i<2)?3:9);\r",
							"        iid+=num.toString();\r",
							"        counter+=getInc(num,i);\r",
							"    }\r",
							"    return iid+(10-(counter%10)).toString();\r",
							"}\r",
							"function checkIid(s) {\r",
							"    var sID = String(s);\r",
							"    if ((sID.length != 9) || (isNaN(sID))) return false;\r",
							"    var counter = 0, incNum;\r",
							"    for (var i = 0; i < 9; i++) {\r",
							"        incNum = Number(sID.charAt(i));\r",
							"        incNum *= (i % 2) + 1;\r",
							"        if (incNum > 9) incNum -= 9;\r",
							"        counter += incNum;\r",
							"    }\r",
							"    return (counter % 10 === 0);\r",
							"}\r",
							"const generate = function() {\r",
							"    let iid = null;\r",
							"    let checkStatus = null;\r",
							"    while (!checkStatus) {\r",
							"        iid = getIid();\r",
							"        checkStatus = checkIid(iid);\r",
							"    }\r",
							"    return iid;\r",
							"};\r",
							"const nationalid = generate();\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"NationalId\",nationalid);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"type": "text",
						"value": "gtpkg=s%3AQubsI7IF10VOs_uAom8a3zeAVA18QYaH.3HUJlOcno%2Bayt6qBG2Ms4IXQGSR4mguqZDE4%2FlxH9kc"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"account_number\": \"{{$randomInt}}\",\r\n    \"bank_id\": 1,\r\n    \"branch_number\": \"934\",\r\n    \"account_owner_name\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://stg-web.getpackage.com/api/v1/admin/courier/{{CourierId}}/",
					"protocol": "https",
					"host": [
						"stg-web",
						"getpackage",
						"com"
					],
					"path": [
						"api",
						"v1",
						"admin",
						"courier",
						"{{CourierId}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Manual Payout Line",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"delivery_id\", pm.response.json().delivery_id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"const moment = require('moment');\r",
							"pm.globals.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Token 9857f44f2193b7d38e1347ba42548ae4bd3edf8e"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operationName\": \"CreateManualChargeLine\",\r\n    \"variables\": {\r\n        \"time\": \"2020-12-01T01:08:09.275+02:00\",\r\n        \"courierId\": {{CourierId}},\r\n        \"manualType\": 0,\r\n        \"description\": \"sdf\",\r\n        \"price\": 20\r\n    },\r\n    \"query\": \"mutation CreateManualChargeLine($time: DateTime, $courierId: Int, $manualType: Int, $description: String, $price: Float) {\\n  createManualChargeLine(time: $time, courierId: $courierId, manualType: $manualType, description: $description, price: $price) {\\n    id\\n    courierId\\n    routeId\\n    courierPayout {\\n      amount\\n      currency\\n      __typename\\n    }\\n    time\\n    description\\n    type\\n    courierTaxId\\n    senderId\\n    senderName\\n    status\\n    __typename\\n  }\\n}\\n\"\r\n}"
				},
				"url": {
					"raw": "https://api-stg.getpackage-dev.com/v1/graphql/",
					"protocol": "https",
					"host": [
						"api-stg",
						"getpackage-dev",
						"com"
					],
					"path": [
						"v1",
						"graphql",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Withdrawal- undefined",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Token {{token}}"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  createWithdrawal {\r\n    id\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api-stg.getpackage-dev.com/v1/graphql/",
					"protocol": "https",
					"host": [
						"api-stg",
						"getpackage-dev",
						"com"
					],
					"path": [
						"v1",
						"graphql",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new pay tax + vat courier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var phoneNumber = pm.globals.get(\"EncPhoneNumber\");\r",
							"pm.globals.set(\"EncPhoneNumber\", (phoneNumber+1));\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"token\", pm.response.json().token);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"CourierId\", pm.response.json().courier.id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"function getInc(num, i) {\r",
							"    var inc = Number(num)*((i%2)+1);\r",
							"    return (inc>9)?inc-=9:inc;\r",
							"}\r",
							"function getIid() {\r",
							"    var iid=\"\", num, counter=0;\r",
							"    for(var i=0;i<8;i++) {\r",
							"        num=getRandomInt((i<2)?2:0,(i<2)?3:9);\r",
							"        iid+=num.toString();\r",
							"        counter+=getInc(num,i);\r",
							"    }\r",
							"    return iid+(10-(counter%10)).toString();\r",
							"}\r",
							"function checkIid(s) {\r",
							"    var sID = String(s);\r",
							"    if ((sID.length != 9) || (isNaN(sID))) return false;\r",
							"    var counter = 0, incNum;\r",
							"    for (var i = 0; i < 9; i++) {\r",
							"        incNum = Number(sID.charAt(i));\r",
							"        incNum *= (i % 2) + 1;\r",
							"        if (incNum > 9) incNum -= 9;\r",
							"        counter += incNum;\r",
							"    }\r",
							"    return (counter % 10 === 0);\r",
							"}\r",
							"const generate = function() {\r",
							"    let iid = null;\r",
							"    let checkStatus = null;\r",
							"    while (!checkStatus) {\r",
							"        iid = getIid();\r",
							"        checkStatus = checkIid(iid);\r",
							"    }\r",
							"    return iid;\r",
							"};\r",
							"const nationalid = generate();\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"NationalId\",nationalid);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"EncPhoneNumber\", _.random(10000000, 99999999))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"type": "text",
						"value": "csrftoken=PFkyiEELyDjvkskvqCpnxna7gLro7e4bl6DQyE5L7Zi1EiOx4zvUwz34OQHUn1r7"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\t{\r\n    \"city\": \"תל אביב\",\r\n\t\"email\": \"tomer+{{$randomInt}}{{$randomInt}}@gmail.com\",\r\n\t\"first_name\": \"Tomer\",\r\n\t\"last_name\": \"levi gptest\",\r\n\t\"national_id\": \"{{NationalId}}\",\r\n\t\"phone_number\": \"05{{EncPhoneNumber}}\",\r\n\t\"tax_id\": \"{{NationalId}}\",\r\n\t\"tax_method\": 1,\r\n\t\"vehicle_license_number\": \"11111111\",\r\n\t\"vehicle_type_id\": 5,\r\n\t\"with_payment\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://stg-python.getpackage.com/api/v1/courier/create/",
					"protocol": "https",
					"host": [
						"stg-python",
						"getpackage",
						"com"
					],
					"path": [
						"api",
						"v1",
						"courier",
						"create",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add bank to pay tax courier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"CourierId\", pm.response.json().courier.id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"function getInc(num, i) {\r",
							"    var inc = Number(num)*((i%2)+1);\r",
							"    return (inc>9)?inc-=9:inc;\r",
							"}\r",
							"function getIid() {\r",
							"    var iid=\"\", num, counter=0;\r",
							"    for(var i=0;i<8;i++) {\r",
							"        num=getRandomInt((i<2)?2:0,(i<2)?3:9);\r",
							"        iid+=num.toString();\r",
							"        counter+=getInc(num,i);\r",
							"    }\r",
							"    return iid+(10-(counter%10)).toString();\r",
							"}\r",
							"function checkIid(s) {\r",
							"    var sID = String(s);\r",
							"    if ((sID.length != 9) || (isNaN(sID))) return false;\r",
							"    var counter = 0, incNum;\r",
							"    for (var i = 0; i < 9; i++) {\r",
							"        incNum = Number(sID.charAt(i));\r",
							"        incNum *= (i % 2) + 1;\r",
							"        if (incNum > 9) incNum -= 9;\r",
							"        counter += incNum;\r",
							"    }\r",
							"    return (counter % 10 === 0);\r",
							"}\r",
							"const generate = function() {\r",
							"    let iid = null;\r",
							"    let checkStatus = null;\r",
							"    while (!checkStatus) {\r",
							"        iid = getIid();\r",
							"        checkStatus = checkIid(iid);\r",
							"    }\r",
							"    return iid;\r",
							"};\r",
							"const nationalid = generate();\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"NationalId\",nationalid);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"type": "text",
						"value": "gtpkg=s%3AQubsI7IF10VOs_uAom8a3zeAVA18QYaH.3HUJlOcno%2Bayt6qBG2Ms4IXQGSR4mguqZDE4%2FlxH9kc"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"account_number\": \"{{$randomInt}}\",\r\n    \"bank_id\": 1,\r\n    \"branch_number\": \"934\",\r\n    \"account_owner_name\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://stg-web.getpackage.com/api/v1/admin/courier/{{CourierId}}/",
					"protocol": "https",
					"host": [
						"stg-web",
						"getpackage",
						"com"
					],
					"path": [
						"api",
						"v1",
						"admin",
						"courier",
						"{{CourierId}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Manual Payout Line",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"delivery_id\", pm.response.json().delivery_id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"const moment = require('moment');\r",
							"pm.globals.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Token 9857f44f2193b7d38e1347ba42548ae4bd3edf8e"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operationName\": \"CreateManualChargeLine\",\r\n    \"variables\": {\r\n        \"time\": \"2020-12-01T01:08:09.275+02:00\",\r\n        \"courierId\": {{CourierId}},\r\n        \"manualType\": 0,\r\n        \"description\": \"sdf\",\r\n        \"price\": 20\r\n    },\r\n    \"query\": \"mutation CreateManualChargeLine($time: DateTime, $courierId: Int, $manualType: Int, $description: String, $price: Float) {\\n  createManualChargeLine(time: $time, courierId: $courierId, manualType: $manualType, description: $description, price: $price) {\\n    id\\n    courierId\\n    routeId\\n    courierPayout {\\n      amount\\n      currency\\n      __typename\\n    }\\n    time\\n    description\\n    type\\n    courierTaxId\\n    senderId\\n    senderName\\n    status\\n    __typename\\n  }\\n}\\n\"\r\n}"
				},
				"url": {
					"raw": "https://api-stg.getpackage-dev.com/v1/graphql/",
					"protocol": "https",
					"host": [
						"api-stg",
						"getpackage-dev",
						"com"
					],
					"path": [
						"v1",
						"graphql",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Withdrawal- pay tax+ vat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Token {{token}}"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  createWithdrawal {\r\n    id\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api-stg.getpackage-dev.com/v1/graphql/",
					"protocol": "https",
					"host": [
						"api-stg",
						"getpackage-dev",
						"com"
					],
					"path": [
						"v1",
						"graphql",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new pay tax courier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"token\", pm.response.json().token);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"CourierId\", pm.response.json().courier.id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"function getInc(num, i) {\r",
							"    var inc = Number(num)*((i%2)+1);\r",
							"    return (inc>9)?inc-=9:inc;\r",
							"}\r",
							"function getIid() {\r",
							"    var iid=\"\", num, counter=0;\r",
							"    for(var i=0;i<8;i++) {\r",
							"        num=getRandomInt((i<2)?2:0,(i<2)?3:9);\r",
							"        iid+=num.toString();\r",
							"        counter+=getInc(num,i);\r",
							"    }\r",
							"    return iid+(10-(counter%10)).toString();\r",
							"}\r",
							"function checkIid(s) {\r",
							"    var sID = String(s);\r",
							"    if ((sID.length != 9) || (isNaN(sID))) return false;\r",
							"    var counter = 0, incNum;\r",
							"    for (var i = 0; i < 9; i++) {\r",
							"        incNum = Number(sID.charAt(i));\r",
							"        incNum *= (i % 2) + 1;\r",
							"        if (incNum > 9) incNum -= 9;\r",
							"        counter += incNum;\r",
							"    }\r",
							"    return (counter % 10 === 0);\r",
							"}\r",
							"const generate = function() {\r",
							"    let iid = null;\r",
							"    let checkStatus = null;\r",
							"    while (!checkStatus) {\r",
							"        iid = getIid();\r",
							"        checkStatus = checkIid(iid);\r",
							"    }\r",
							"    return iid;\r",
							"};\r",
							"const nationalid = generate();\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"NationalId\",nationalid);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"EncPhoneNumber\", _.random(10000000, 99999999))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"type": "text",
						"value": "csrftoken=PFkyiEELyDjvkskvqCpnxna7gLro7e4bl6DQyE5L7Zi1EiOx4zvUwz34OQHUn1r7"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\t{\r\n    \"city\": \"תל אביב\",\r\n\t\"email\": \"tomer+{{$randomInt}}{{$randomInt}}@gmail.com\",\r\n\t\"first_name\": \"Tomer\",\r\n\t\"last_name\": \"levi gptest\",\r\n\t\"national_id\": \"{{NationalId}}\",\r\n\t\"phone_number\": \"05{{EncPhoneNumber}}\",\r\n\t\"tax_id\": \"{{NationalId}}\",\r\n\t\"tax_method\": 2,\r\n\t\"vehicle_license_number\": \"11111111\",\r\n\t\"vehicle_type_id\": 5,\r\n\t\"with_payment\": false,\r\n    \"account_number\": \"2342\",\r\n    \"bank_id\": 1,\r\n    \"branch_number\": \"934\",\r\n    \"full_name\": \"Tomer levi gptest\"\r\n\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://stg-python.getpackage.com/api/v1/courier/create/",
					"protocol": "https",
					"host": [
						"stg-python",
						"getpackage",
						"com"
					],
					"path": [
						"api",
						"v1",
						"courier",
						"create",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Add bank to pay tax courier",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"CourierId\", pm.response.json().courier.id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"function getInc(num, i) {\r",
							"    var inc = Number(num)*((i%2)+1);\r",
							"    return (inc>9)?inc-=9:inc;\r",
							"}\r",
							"function getIid() {\r",
							"    var iid=\"\", num, counter=0;\r",
							"    for(var i=0;i<8;i++) {\r",
							"        num=getRandomInt((i<2)?2:0,(i<2)?3:9);\r",
							"        iid+=num.toString();\r",
							"        counter+=getInc(num,i);\r",
							"    }\r",
							"    return iid+(10-(counter%10)).toString();\r",
							"}\r",
							"function checkIid(s) {\r",
							"    var sID = String(s);\r",
							"    if ((sID.length != 9) || (isNaN(sID))) return false;\r",
							"    var counter = 0, incNum;\r",
							"    for (var i = 0; i < 9; i++) {\r",
							"        incNum = Number(sID.charAt(i));\r",
							"        incNum *= (i % 2) + 1;\r",
							"        if (incNum > 9) incNum -= 9;\r",
							"        counter += incNum;\r",
							"    }\r",
							"    return (counter % 10 === 0);\r",
							"}\r",
							"const generate = function() {\r",
							"    let iid = null;\r",
							"    let checkStatus = null;\r",
							"    while (!checkStatus) {\r",
							"        iid = getIid();\r",
							"        checkStatus = checkIid(iid);\r",
							"    }\r",
							"    return iid;\r",
							"};\r",
							"const nationalid = generate();\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"NationalId\",nationalid);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"type": "text",
						"value": "gtpkg=s%3AQubsI7IF10VOs_uAom8a3zeAVA18QYaH.3HUJlOcno%2Bayt6qBG2Ms4IXQGSR4mguqZDE4%2FlxH9kc"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"account_number\": \"{{$randomInt}}\",\r\n    \"bank_id\": 1,\r\n    \"branch_number\": \"934\",\r\n    \"account_owner_name\": \"{{$randomFullName}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://stg-web.getpackage.com/api/v1/admin/courier/{{CourierId}}/",
					"protocol": "https",
					"host": [
						"stg-web",
						"getpackage",
						"com"
					],
					"path": [
						"api",
						"v1",
						"admin",
						"courier",
						"{{CourierId}}",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Manual Payout Line",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"delivery_id\", pm.response.json().delivery_id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"const moment = require('moment');\r",
							"pm.globals.set(\"timestamp\", moment().add(1, 'days').format(\"YYYY-MM-DD\"));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Token 9857f44f2193b7d38e1347ba42548ae4bd3edf8e"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"operationName\": \"CreateManualChargeLine\",\r\n    \"variables\": {\r\n        \"time\": \"2020-12-01T01:08:09.275+02:00\",\r\n        \"courierId\": {{CourierId}},\r\n        \"manualType\": 0,\r\n        \"description\": \"sdf\",\r\n        \"price\": 20\r\n    },\r\n    \"query\": \"mutation CreateManualChargeLine($time: DateTime, $courierId: Int, $manualType: Int, $description: String, $price: Float) {\\n  createManualChargeLine(time: $time, courierId: $courierId, manualType: $manualType, description: $description, price: $price) {\\n    id\\n    courierId\\n    routeId\\n    courierPayout {\\n      amount\\n      currency\\n      __typename\\n    }\\n    time\\n    description\\n    type\\n    courierTaxId\\n    senderId\\n    senderName\\n    status\\n    __typename\\n  }\\n}\\n\"\r\n}"
				},
				"url": {
					"raw": "https://api-stg.getpackage-dev.com/v1/graphql/",
					"protocol": "https",
					"host": [
						"api-stg",
						"getpackage-dev",
						"com"
					],
					"path": [
						"v1",
						"graphql",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Withdrawal- pay tax",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"CourierId\", pm.response.json().courier.id);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							"function getRandomInt(min, max) {\r",
							"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
							"}\r",
							"function getInc(num, i) {\r",
							"    var inc = Number(num)*((i%2)+1);\r",
							"    return (inc>9)?inc-=9:inc;\r",
							"}\r",
							"function getIid() {\r",
							"    var iid=\"\", num, counter=0;\r",
							"    for(var i=0;i<8;i++) {\r",
							"        num=getRandomInt((i<2)?2:0,(i<2)?3:9);\r",
							"        iid+=num.toString();\r",
							"        counter+=getInc(num,i);\r",
							"    }\r",
							"    return iid+(10-(counter%10)).toString();\r",
							"}\r",
							"function checkIid(s) {\r",
							"    var sID = String(s);\r",
							"    if ((sID.length != 9) || (isNaN(sID))) return false;\r",
							"    var counter = 0, incNum;\r",
							"    for (var i = 0; i < 9; i++) {\r",
							"        incNum = Number(sID.charAt(i));\r",
							"        incNum *= (i % 2) + 1;\r",
							"        if (incNum > 9) incNum -= 9;\r",
							"        counter += incNum;\r",
							"    }\r",
							"    return (counter % 10 === 0);\r",
							"}\r",
							"const generate = function() {\r",
							"    let iid = null;\r",
							"    let checkStatus = null;\r",
							"    while (!checkStatus) {\r",
							"        iid = getIid();\r",
							"        checkStatus = checkIid(iid);\r",
							"    }\r",
							"    return iid;\r",
							"};\r",
							"const nationalid = generate();\r",
							"\r",
							"try {\r",
							"    // save userId from json response as an environment variable\r",
							"    pm.environment.set(\"NationalId\",nationalid);\r",
							"} catch(e) {\r",
							"    // print the exception to the console\r",
							"    console.log(e);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "Token {{token}}"
					}
				],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation {\r\n  createWithdrawal {\r\n    id\r\n  }\r\n}",
						"variables": ""
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api-stg.getpackage-dev.com/v1/graphql/",
					"protocol": "https",
					"host": [
						"api-stg",
						"getpackage-dev",
						"com"
					],
					"path": [
						"v1",
						"graphql",
						""
					]
				}
			},
			"response": []
		}
	]
}
